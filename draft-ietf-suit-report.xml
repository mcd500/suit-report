<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.31 (Ruby 3.2.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-report-09" category="info" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Secure Reporting of Update Status">Secure Reporting of Update Status</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2024" month="October" day="21"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The Software Update for the Internet of Things (SUIT) manifest provides
a way for many different update and boot
workflows to be described by a common format. However, this does not
provide a feedback mechanism for developers in the event that an update
or boot fails.</t>

<t>This specification describes a lightweight feedback mechanism that
allows a developer in possession of a manifest to reconstruct the
decisions made and actions performed by a manifest processor.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A SUIT manifest processor can fail to install or boot an update for many
reasons. Frequently, the error codes generated by such systems fail to
provide developers with enough information to find root causes and
produce corrective actions, resulting in extra effort to reproduce
failures. Logging the results of each SUIT command can simplify this
process.</t>

<t>While it is possible to report the results of SUIT commands through
existing logging or attestation mechanisms, this comes with several
drawbacks:</t>

<t><list style="symbols">
  <t>data inflation, particularly when designed for text-based logging</t>
  <t>missing information elements</t>
  <t>missing support for multiple components</t>
</list></t>

<t>The CBOR objects defined in this document allow devices to:</t>

<t><list style="symbols">
  <t>report a trace of how an update was performed</t>
  <t>report expected vs. actual values for critical checks</t>
  <t>describe the installation of complex multi-component architectures</t>
  <t>describe the measured properties of a system</t>
  <t>report the exact reason for a parsing failure</t>
</list></t>

<t>This document provides a definition of a SUIT-specific logging container
that may be used in a variety of scenarios.</t>

</section>
<section anchor="terminology"><name>Conventions and Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Terms used in this specification include:</t>

<t><list style="symbols">
  <t>Boot: initialization of an executable image. Although this
specification refers to boot, any boot-specific operations described
are equally applicable to starting an executable in an OS context.</t>
</list></t>

</section>
<section anchor="the-suit-record"><name>The SUIT Record</name>

<t>If the developer can be assumed to have a copy of the
manifest, then they need little information to reconstruct what the
manifest processor has done. They simply need any data that influences
the control flow of the manifest. The manifest only supports the
following control flow primitives:</t>

<t><list style="symbols">
  <t>Set Component</t>
  <t>Set/Override Parameters</t>
  <t>Try-Each</t>
  <t>Run Sequence</t>
  <t>Conditions</t>
</list></t>

<t>Of these, only conditions change the behavior of the processor from the
default, and then only when the condition fails.</t>

<t>Then, to reconstruct the flow of a manifest, all a developer needs is
a list of metadata about failed conditions:</t>

<t><list style="symbols">
  <t>the current manifest</t>
  <t>the current section</t>
  <t>the offset into the current section</t>
  <t>the current component index</t>
  <t>the "reason" for failure</t>
</list></t>

<t>Most conditions compare a parameter to an actual value, so the "reason"
is typically simply the actual value.</t>

<t>Since it is possible that a non-condition command (directive) may fail in an
exceptional circumstance, this must be included as well. However, 
a failed directive will terminate processing of the manifest. To accommodate
for a failed command and for explicit "completion," an additional "result"
element is added as well. In the case of a command failure,
the failure reason is typically a numeric error code. However, these error
codes need to be standardised in order to be useful.</t>

<t>Reconstructing what a device has done in this way is compact,
however it requires some reconstruction effort. This is an issue that
can be solved by tooling.</t>

<figure><artwork><![CDATA[
SUIT_Record = [
    suit-record-manifest-id        : [* uint ],
    suit-record-manifest-section   : int,
    suit-record-section-offset     : uint,
    suit-record-component-index    : uint,
    suit-record-properties         : SUIT_Parameters,
    $$SUIT_Record_Extensions
]
]]></artwork></figure>

<t>suit-record-manifest-id is used to identify which manifest contains the
command that caused the record to be generated. The manifest id is a
list of integers that form a walk of the manifest tree, starting at the
root. An empty list indicates that the command was contained in the
root manifest. If the list is not empty, the command was contained in
one of the root manifest's dependencies, or nested even further below
that.</t>

<t>For example, suppose that the root manifest has 3 dependencies
and each of those dependencies has 2 dependencies of its own:</t>

<t><list style="symbols">
  <t>Root  <list style="symbols">
      <t>Dependency A      <list style="symbols">
          <t>Dependency A0</t>
          <t>Dependency A1</t>
        </list></t>
      <t>Dependency B      <list style="symbols">
          <t>Dependency B0</t>
          <t>Dependency B1</t>
        </list></t>
      <t>Dependency C      <list style="symbols">
          <t>Dependency C0</t>
          <t>Dependency C1</t>
        </list></t>
    </list></t>
</list></t>

<t>A manifest-id of [1,0] would indicate that the current command was
contained within Dependency B0. Similarly, a manifest-id of [2,1]
would indicate Dependency C1</t>

<t>suit-record-manifest-section indicates which section of the manifest was
active. This is used in addition to an offset so that the developer can
index into severable sections in a predictable way. The value of this
element is the value of the key that identified the section in the
manifest.</t>

<t>suit-record-section-offset is the number of bytes into the current
section at which the current command is located.</t>

<t>suit-record-component-index is the index of the component that was
specified at the time that the report was generated. This field is
necessary due to the availability of set-current-component values of
True and a list of components. Both of these values cause the manifest
processor to loop over commands using a series of component-ids, so the
developer needs to know which was selected when the command executed.</t>

<t>suit-record-properties contains any measured properties that led to the
command failure.
For example, this could be the actual value of a SUIT_Digest or
class identifier. This is encoded in a SUIT_Parameters block as defined
in <xref target="I-D.ietf-suit-manifest"/>.</t>

</section>
<section anchor="suit-report"><name>The SUIT_Report</name>

<t>Some metadata is common to all records, such as the root manifest:
the manifest that is the entry-point for the manifest processor. This
metadata is aggregated with a list of SUIT_Records. The SUIT_Report
may also contain a list of any system properties that were measured
and reported, and a reason for a failure if one occured.</t>

<t>CDDL~~~
SUIT_Report = {
  suit-reference              =&gt; SUIT_Reference,
  ? suit-report-nonce         =&gt; bstr,
  suit-report-records         =&gt; [ * SUIT_Record / system-property-claims ],
  suit-report-result          =&gt; true / {
    suit-report-result-code   =&gt; int,
    suit-report-result-record =&gt; SUIT_Record,
    suit-report-result-reason =&gt; SUIT_Report_Reasons,
  },
  ? suit-report-capability-report =&gt; SUIT_Capability_Report,
  $$SUIT_Report_Extensions
}
system-property-claims = {
  system-component-id =&gt; SUIT_Component_Identifier,
  + SUIT_Parameters,
}
~~~</t>

<t>The suit-reference provides a reference URI and digest for a suit
manifest. The uri <bcp14>SHOULD</bcp14> be the canonical URI that is provided in the
manifest. The digest is the digest of the manifest.</t>

<t>NOTE: The digest is used
in preference to other identifiers in the manifest because it allows
a manifest to be uniquely identified (collision resistance) whereas
other identifiers, such as the sequence number, can collide,
particularly in scenarios with multiple trusted signers.</t>

<t>The following CDDL describes a SUIT_Reference.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Reference = {
    suit-report-manifest-uri  : tstr,
    suit-report-manifest-digest : SUIT_Digest,
}
]]></sourcecode></figure>

<t>suit-report-manifest-digest provides a SUIT_Digest (as defined in
<xref target="I-D.ietf-suit-manifest"/>) that is the characteristic digest of the
Root manifest.</t>

<t>suit-report-manifest-uri provides the reference URI that was provided in
the root manifest.</t>

<t>suit-report-nonce provides a container for freshness or replay
protection information. This field <bcp14>MAY</bcp14> be omitted where the suit-report
is authenticated within a container that provides freshness already.
For example, attestation evidence typically contains a proof of
freshness.</t>

<section anchor="suit-record"><name>SUIT Record</name>

<t>suit-report-records is a list of 0 or more SUIT Records or 
system-property-claims. Because SUIT Records are only generated on failure,
in simple cases this can be an empty list. SUIT_Records and 
suit-system-property-claims are merged into a single list because this
reduces the overhead for a constrained node that generates this report.
The use of a single append-only log allows report generators to use simple
memory management. Because the system-property-claims are encoded as maps
and SUIT_Records are encoded as lists, a recipient need only filter the
CBOR Type-5 entries from suit-report-records to obtain all 
system-property-claims.</t>

<t>System properties can be extracted from suit-report-records by filtering
suit-report-records for maps. System Properties are a list of measured 
or asserted properties
of the system that creates the SUIT_Report. These properties are scoped by
component identifier. Because this list is expected to be constructed on
the fly by a constrained node, component identifiers may appear more than
once. A recipient may convert the result to a more conventional structure:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Record_System_Properties = {
  * component-id => {
    + SUIT_Parameters,
  }
}
]]></sourcecode></figure>

</section>
<section anchor="suit-report-result"><name>SUIT Report Result</name>

<t>suit-report-result provides a mechanism to show that the SUIT procedure
completed successfully (value is true) or why it failed (value is a map
of an error code and a SUIT_Record).</t>

<t>suit-report-result-reason gives a high-level explanation of the failure.
These reasons are intended for interoperable implementations. The reasons
are divided into a small number of groups:</t>

<t><list style="symbols">
  <t>suit-report-reason-cbor-parse: a parsing error was encountered by the
CBOR parser.</t>
  <t>suit-report-reason-cose-unsupported: an unusupported COSE structure or
header was encountered.</t>
  <t>suit-report-reason-alg-unsupported: an unsupported COSE algorithm was
encountered.</t>
  <t>suit-report-reason-unauthorised: Signature/MAC verification failed.</t>
  <t>suit-report-reason-command-unsupported: an unsupported command was
encountered.</t>
  <t>suit-report-reason-component-unsupported: The manifest declared a 
component/prefix that does not exist.</t>
  <t>suit-report-reason-component-unauthorised: The manifest declared a 
component that is not accessible by the signer.</t>
  <t>suit-report-reason-parameter-unsupported: The manifest used a
parameter that does not exist.</t>
  <t>suit-report-severing-unsupported: The manifest uses severable fields
but the Manifest Processor doesn't support them.</t>
  <t>suit-report-reason-condition-failed: A condition failed with soft-
failure off.</t>
  <t>suit-report-reason-operation-failed: A command failed (e.g., 
download/copy/swap/write)</t>
</list></t>

<t>The suit-report-result-code reports an internal error code that is
provided for debugging reasons. This code is not intended for 
interoperability.</t>

<t>The suit-report-result-record indicates the exact point in the manifest
or manifest dependency tree where the error occured.</t>

<t>suit-report-capability-report provides a mechanism to report the capabilities of the Manifest Processor. The SUIT_Capability_Report is described in <xref target="capabilities"/>. The capability report is optional to include in the SUIT_Report, according to an application-specific policy. While the SUIT_Capability_Report is not expected to be very large, applications should ensure that they only report capabilities when necessary in order to conserve bandwidth. A capability report is not necessary except when:</t>

<t><list style="numbers">
  <t>A client explicitly requests the capability report, or</t>
  <t>A manifest attempts to use a capability that the Manifest Processor does not implement.</t>
</list></t>

</section>
</section>
<section anchor="attestation"><name>Attestation</name>

<t>This document describes how a well-informed verifier can infer the trustworthiness of a remote device. Remote attestation is done by using the SUIT_Manifest_Envelope along with the SUIT_Report to reconstruct the state of the device at boot time. By embedding data used for remote attestation in the SUIT_Report, a remote device can use an append-only log to collect both measurements and debug/failure information into the same document. This document can then be conveyed to a verifier as a part of the attestation evidence. A remote attestation format to convey attestation evidence, such as an Entity Attestation Token (EAT, see <xref target="I-D.ietf-rats-eat"/>), that contains a SUIT_Report <bcp14>MUST</bcp14> also include an integrity measurement of the Manifest Processor &amp; Report Generator.</t>

<t>When a Concise Reference Integrity Manifest (CoRIM, see <xref target="I-D.birkholz-rats-corim"/> is delivered in a SUIT_Manifest_Envelope, this codifies the delivery of verification information to the verifier:</t>

<t><list style="symbols">
  <t>The Firmware Distributor:
  <list style="symbols">
      <t>sends the SUIT_Manifest_Envelope to the Verifier without payload or text, but with CoRIM</t>
      <t>sends the SUIT_Manifest_Envelope to the recipient without CoRIM, or text, but with payload</t>
    </list></t>
  <t>The Recipient:
  <list style="symbols">
      <t>Installs the firmware as described in the SUIT_Manifest and generates a SUIT_report, which is encapsulated in an EAT by the installer and sent to the Firmware Distributor.</t>
      <t>Boots the firmware as described in the SUIT_Manifest and creates a SUIT_report, which is encapsulated in an EAT by the installer and sent to the Firmware Distributor.</t>
    </list></t>
  <t>The Firmware Distributor sends both reports to the verifier (separately or together)</t>
  <t>The Verifier:
  <list style="symbols">
      <t>Reconstructs the state of the device using the manifest</t>
      <t>Compares this state to the CoRIM</t>
      <t>Returns an Attestation Report to the Firmware Distributor</t>
    </list></t>
</list></t>

<t>This approach simplifies the design of the bootloader since it is able to use an append-only log. It allows a verifier to validate this report against a signed CoRIM that is provided by the firmware author, which simplifies the delivery chain of verification information to the verifier.</t>

<t>This information is not intended as Attestation Evidence and while an Attestation Report <bcp14>MAY</bcp14> provide this information for conveying error codes and/or failure reports, it <bcp14>SHOULD</bcp14> be translated into general-purpose claims for use by the Relying Party.</t>

</section>
<section anchor="capabilities"><name>Capability Reporting</name>

<t>Because SUIT is extensible, a manifest author must know what capabilities a device has available. To enable this, a capability report is a set of lists that define which commands, parameters, algorithms, and component IDs are supported by a manifest processor.</t>

<t>The CDDL for a SUIT_Capability_Report follows:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Capability_Report = {
  suit-component-capabilities        => [+ SUIT_Component_Capability ]
  suit-command-capabilities          => [+ int],
  suit-parameters-capabilities       => [+ int],
  suit-crypt-algo-capabilities       => [+ int],
  ? suit-envelope-capabilities       => [+ int],
  ? suit-manifest-capabilities       => [+ int],
  ? suit-common-capabilities         => [+ int],
  ? suit-text-capabilities           => [+ int],
  ? suit-text-component-capabilities => [+ int],
  ? suit-dependency-capabilities     => [+ int],
  * [+int]                           => [+ int],
  $$SUIT_Capability_Report_Extensions
}

SUIT_Component_Capability = [*bstr,?true]
]]></sourcecode></figure>

<t>A SUIT_Component_Capability is similar to a SUIT_Component_ID, with one difference: it may optionally be terminated by a CBOR 'true' which acts as a wild-card match for any component with a prefix matching the SUIT_Component_Capability leading up to the 'true.' This feature is for use with filesystem storage, key value stores, or any other arbitrary-component-id storage systems.</t>

<t>When reporting capabilities, it is <bcp14>OPTIONAL</bcp14> to report capabilities that are declared mandatory by the SUIT Manifest <xref target="I-D.ietf-suit-manifest"/>. Capabilities defined by extensions <bcp14>MUST</bcp14> be reported.</t>

<t>Additional capability reporting can be added as follows: if a manifest element does not exist in this map, it can be added by specifying the CBOR path to the manifest element in an array and using this as the key. For example SUIT_Dependencies, as described in <xref target="I-D.ietf-suit-trust-domains"/> could have an extension added, which was key 3 in the SUIT_Dependencies map. This capability would be reported as: [3, 3, 1] =&gt; [3], where the key consists of the key for SUIT_Manifest (3), the key for SUIT_Common (3), and the key for SUIT_Dependencies (1). Then the value indicates that this manifest processor supports the extension (3).</t>

</section>
<section anchor="eat"><name>EAT Claim</name>

<t>The SUIT_Report is a form of measurement done by the SUIT Manifest Processor as it attempts to invoke a manifest or install a manifest. As a result, the SUIT_Report can be captured in an EAT measurements type.
The Verifier <bcp14>MAY</bcp14> convert a SUIT_Report into a more consumable version of the EAT claim by, for example, constructing a measres claim that contains the digest of a component, the vendor ID &amp; class ID of a component, etc.</t>

</section>
<section anchor="container"><name>SUIT_Report container</name>

<t>The SUIT_Report <bcp14>MUST</bcp14> be carried in a container or transport that ensures authenticity. The SUIT_Report <bcp14>MUST</bcp14> be transported using one of the following options:</t>

<t><list style="symbols">
  <t>As an element of an existing document that ensures authenticity, such as in a measurements claim in an EAT.</t>
  <t>As the payload of a message delivered over secure transport, such as a CoAP or LwM2M message.</t>
  <t>Contained within a secure container that conforms to the current recommendations of <xref target="I-D.ietf-suit-mti"/>.</t>
</list></t>

<t>In this case, the SUIT_Report is carried as sole payload of a COSE_Encrypt0 or COSE_Sign1 as shown in the CDDL snippet below.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Report_Protected /= SUIT_Report_COSE_Sign1 .and SUIT_COSE_Profiles
SUIT_Report_Protected /= SUIT_Report_COSE_Sign1_Tagged .and SUIT_COSE_Profiles
SUIT_Report_Protected /= SUIT_Report_COSE_MAC0 .and SUIT_COSE_Profiles
SUIT_Report_Protected /= SUIT_Report_COSE_MAC0_Tagged .and SUIT_COSE_Profiles

SUIT_Report_COSE_Sign1_Tagged = #6.18(SUIT_Report_COSE_Sign1)
SUIT_Report_COSE_Sign1 = [
    protected : bstr,
    unprotected : {* int => any},
    payload : bstr .cbor SUIT_Report_Unprotected,
    signature : bstr
]
SUIT_Report_COSE_MAC0_Tagged = #6.17(SUIT_Report_COSE_MAC0)
SUIT_Report_COSE_MAC0 = [
    protected : bstr,
    unprotected : {* int => any},
    payload : bstr .cbor SUIT_Report_Unprotected,
    tag : bstr
]
SUIT_Report_Unprotected = SUIT_Report / SUIT_Report_COSE_Encrypt0
SUIT_Report_COSE_Encrypt0 = COSE_Encrypt0
]]></sourcecode></figure>

<t>Note that SUIT_Report_COSE_Sign1 and SUIT_Report_COSE_MAC0 <bcp14>MUST</bcp14> be combined with a SUIT_COSE_Profile from <xref target="I-D.ietf-suit-mti"/> using the CDDL .and directive. The SUIT_Report_COSE_Encrypt0 carries a ciphertext payload that <bcp14>MUST</bcp14> contain just the ciphertext obtained by encrypting the following CDDL:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Report_plaintext = bstr .cbor SUIT_Report
]]></sourcecode></figure>

<t>SUIT_COSE_Profiles define only AES-CTR encryption due to its suitability for firmware distribution. Because AES-CTR is not authenticated, SUIT_Report_Protected defines authenticated containers with an encrypted payload.</t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to allocate a CBOR tag and a coap content-type each for the SUIT_Report, SUIT_Reference, and SUIT_Capability_Report CBOR data structures.</t>

<t>IANA is also requested to add the following registries to the SUIT category:</t>

<t><list style="symbols">
  <t>SUIT Report Elements</t>
  <t>SUIT Record Elements</t>
  <t>SUIT Report Reasons</t>
  <t>SUIT Capability Report Elements</t>
</list></t>

<section anchor="suit-report"><name>SUIT Report</name>

<t>IANA is requested to create a new registry for SUIT Report Elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>2</c>
      <c>Nonce</c>
      <c><xref target="suit-report"/></c>
      <c>3</c>
      <c>Records</c>
      <c><xref target="suit-report"/></c>
      <c>4</c>
      <c>Result</c>
      <c><xref target="suit-report"/></c>
      <c>5</c>
      <c>Result Code</c>
      <c><xref target="suit-report"/></c>
      <c>6</c>
      <c>Result Record</c>
      <c><xref target="suit-report"/></c>
      <c>7</c>
      <c>Result Reason</c>
      <c><xref target="suit-report"/></c>
      <c>8</c>
      <c>Capability Report</c>
      <c><xref target="suit-report"/></c>
      <c>99</c>
      <c>Reference</c>
      <c><xref target="suit-report"/></c>
</texttable>

</section>
<section anchor="suit-record"><name>SUIT Record</name>

<t>IANA is requested to create a new registry for SUIT Record Elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0</c>
      <c>Manifest ID</c>
      <c><xref target="suit-record"/></c>
      <c>1</c>
      <c>Manifest Section</c>
      <c><xref target="suit-record"/></c>
      <c>2</c>
      <c>Section Offset</c>
      <c><xref target="suit-record"/></c>
      <c>3</c>
      <c>Component Index</c>
      <c><xref target="suit-record"/></c>
      <c>4</c>
      <c>Dependency Index</c>
      <c><xref target="suit-record"/></c>
      <c>5</c>
      <c>Record Properties</c>
      <c><xref target="suit-record"/></c>
</texttable>

</section>
<section anchor="suit-report-reason"><name>SUIT Report Reason</name>

<t>IANA is requested to create a new registry for SUIT Report Reasons.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0</c>
      <c>Result OK</c>
      <c><xref target="suit-report-result"/></c>
      <c>1</c>
      <c>CBOR Parse Failure</c>
      <c><xref target="suit-report-result"/></c>
      <c>2</c>
      <c>Unsupported COSE Structure or Header</c>
      <c><xref target="suit-report-result"/></c>
      <c>3</c>
      <c>Unsupported COSE Algorithm</c>
      <c><xref target="suit-report-result"/></c>
      <c>4</c>
      <c>Signature / MAC verification failed</c>
      <c><xref target="suit-report-result"/></c>
      <c>5</c>
      <c>Unsupported SUIT Command</c>
      <c><xref target="suit-report-result"/></c>
      <c>6</c>
      <c>Unsupported SUIT Component</c>
      <c><xref target="suit-report-result"/></c>
      <c>7</c>
      <c>Unauthorized SUIT Component</c>
      <c><xref target="suit-report-result"/></c>
      <c>8</c>
      <c>Unsupported SUIT Parameter</c>
      <c><xref target="suit-report-result"/></c>
      <c>9</c>
      <c>Severing Unsupported</c>
      <c><xref target="suit-report-result"/></c>
      <c>10</c>
      <c>Condition Failed</c>
      <c><xref target="suit-report-result"/></c>
      <c>11</c>
      <c>Operation Failed</c>
      <c><xref target="suit-report-result"/></c>
</texttable>

</section>
<section anchor="suit-capability-report"><name>Â SUIT Capability Report</name>

<t>IANA is requested to create a new registry for SUIT Capability Report Elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Components</c>
      <c><xref target="capabilities"/></c>
      <c>2</c>
      <c>Commands</c>
      <c><xref target="capabilities"/></c>
      <c>3</c>
      <c>Parameters</c>
      <c><xref target="capabilities"/></c>
      <c>4</c>
      <c>Cryptographic Algorithms</c>
      <c><xref target="capabilities"/></c>
      <c>5</c>
      <c>Envelope Elements</c>
      <c><xref target="capabilities"/></c>
      <c>6</c>
      <c>Manifest Elements</c>
      <c><xref target="capabilities"/></c>
      <c>7</c>
      <c>Common Elements</c>
      <c><xref target="capabilities"/></c>
      <c>8</c>
      <c>Text Elements</c>
      <c><xref target="capabilities"/></c>
      <c>9</c>
      <c>Component Text Elements</c>
      <c><xref target="capabilities"/></c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>There are two aspects to the security considerations for SUIT reports:
authenticity and confidentiality. SUIT reports must have guaranteed
authenticity for them to be useful. Several options are available to
ensure the authenticity of a SUIT report. The report <bcp14>MAY</bcp14> be bundled
as the payload of a cryptographic container as described in <xref target="container"/>.
communicated over a secure transport. It may also be communicated as
part of an existing authenticated protocol, such as within an EAT 
token. Ideally, the SUIT_Report <bcp14>SHOULD</bcp14> be communicated as part of an
attestation flow, such as within an EAT token, since this proves the
authenticity of the environment (hardware, software, or both) in which
the SUIT_Report was generated.</t>

<t>The SUIT_Report <bcp14>MAY</bcp14> require confidentiality as well. A SUIT_Report
could potentially reveal confidential information about the kinds of
device that a particular user has. It could also reveal confidential
information about intellectual property contained in a device. Where
these concerns are relevant, the SUIT_Report <bcp14>MUST</bcp14> be encrypted, for 
example using a COSE_Encrypt as described in <xref target="container"/>, or by using
secure transport. When reporting failures, particularly in the
cryptographic primitives, there is a risk that over-reporting can
provide an attacker with better visibility. Therefore, SUIT_Reports
<bcp14>SHOULD</bcp14> be encrypted wherever possible.</t>

<t>There are also operational considerations that intersect with these
security considerations. In situations where the SUIT report is
encrypted as an element of a message within another protocol, care must
be taken to ensure that this does not leak information and that the
principle of least privilege is respected. For example, in an EAT-based
attestation workflow, the Verifier often will not need the full SUIT
Report. Similarly, the Relying Party may also not need the SUIT_Report.
In this case, the SUIT_Report <bcp14>MUST</bcp14> be encrypted even if the EAT token
that contains it is also encrypted.</t>

<t>In contrast, however, there are scenarios where the EAT Verifier
consumes the SUIT report and translates it into one or more other
EAT claims. For example, a SUIT report that shows a particular digest
was matched using an suit-condition-image can be translated into a
EAT measres (Measurement Results) claim. In this scenario, the Verifier
must have access to the full SUIT_Report.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>The authors would like to thank Dave Thaler for his feedback.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>




<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='21' month='October' year='2024'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-28'/>
   
</reference>

<reference anchor='RFC2119'>
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname='S. Bradner' initials='S.' surname='Bradner'/>
    <date month='March' year='1997'/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='2119'/>
  <seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>

<reference anchor='RFC8174'>
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname='B. Leiba' initials='B.' surname='Leiba'/>
    <date month='May' year='2017'/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='8174'/>
  <seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-rats-eat'>
   <front>
      <title>The Entity Attestation Token (EAT)</title>
      <author fullname='Laurence Lundblade' initials='L.' surname='Lundblade'>
         <organization>Security Theory LLC</organization>
      </author>
      <author fullname='Giridhar Mandyam' initials='G.' surname='Mandyam'>
         <organization>Mediatek USA</organization>
      </author>
      <author fullname='Jeremy O&#x27;Donoghue' initials='J.' surname='O&#x27;Donoghue'>
         <organization>Qualcomm Technologies Inc.</organization>
      </author>
      <author fullname='Carl Wallace' initials='C.' surname='Wallace'>
         <organization>Red Hound Software, Inc.</organization>
      </author>
      <date day='6' month='September' year='2024'/>
      <abstract>
	 <t>   An Entity Attestation Token (EAT) provides an attested claims set
   that describes state and characteristics of an entity, a device like
   a smartphone, IoT device, network equipment or such.  This claims set
   is used by a relying party, server or service to determine the type
   and degree of trust placed in the entity.

   An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with
   attestation-oriented claims.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-rats-eat-31'/>
   
</reference>


<reference anchor='I-D.birkholz-rats-corim'>
   <front>
      <title>Concise Reference Integrity Manifest</title>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Thomas Fossati' initials='T.' surname='Fossati'>
         <organization>arm</organization>
      </author>
      <author fullname='Yogesh Deshpande' initials='Y.' surname='Deshpande'>
         <organization>arm</organization>
      </author>
      <author fullname='Ned Smith' initials='N.' surname='Smith'>
         <organization>Intel</organization>
      </author>
      <author fullname='Wei Pan' initials='W.' surname='Pan'>
         <organization>Huawei Technologies</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   Remote Attestation Procedures (RATS) enable Relying Parties to assess
   the trustworthiness of a remote Attester and therefore to decide
   whether to engage in secure interactions with it.  Evidence about
   trustworthiness can be rather complex and it is deemed unrealistic
   that every Relying Party is capable of the appraisal of Evidence.
   Therefore that burden is typically offloaded to a Verifier.  In order
   to conduct Evidence appraisal, a Verifier requires not only fresh
   Evidence from an Attester, but also trusted Endorsements and
   Reference Values from Endorsers and Reference Value Providers, such
   as manufacturers, distributors, or device owners.  This document
   specifies Concise Reference Integrity Manifests (CoRIM) that
   represent Endorsements and Reference Values in CBOR format.
   Composite devices or systems are represented by a collection of
   Concise Module Identifiers (CoMID) and Concise Software Identifiers
   (CoSWID) bundled in a CoRIM document.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-birkholz-rats-corim-03'/>
   
</reference>


<reference anchor='I-D.ietf-suit-trust-domains'>
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='21' month='October' year='2024'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT Manifest format
   for use in deployments with multiple trust domains.  A device has
   more than one trust domain when it enables delegation of different
   rights to mutually distrusting entities for use for different
   purposes or Components in the context of firmware or software update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-trust-domains-08'/>
   
</reference>


<reference anchor='I-D.ietf-suit-mti'>
   <front>
      <title>Mandatory-to-Implement Algorithms for Authors and Recipients of Software Update for the Internet of Things manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <author fullname='Akira Tsukamoto' initials='A.' surname='Tsukamoto'>
         <organization>ALAXALA Networks Corp.</organization>
      </author>
      <date day='21' month='October' year='2024'/>
      <abstract>
	 <t>   This document specifies algorithm profiles for SUIT manifest parsers
   and authors to ensure better interoperability.  These profiles apply
   specifically to a constrained node software update use case.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-mti-07'/>
   
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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

-->

</rfc>

