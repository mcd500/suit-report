<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.31 (Ruby 3.2.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-report-06" category="info" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Secure Reporting of Update Status">Secure Reporting of Update Status</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2023" month="September" day="11"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The Software Update for the Internet of Things (SUIT) manifest provides
a way for many different update and boot
workflows to be described by a common format. However, this does not
provide a feedback mechanism for developers in the event that an update
or boot fails.</t>

<t>This specification describes a lightweight feedback mechanism that
allows a developer in possession of a manifest to reconstruct the
decisions made and actions performed by a manifest processor.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A SUIT manifest processor can fail to install or boot an update for many
reasons. Frequently, the error codes generated by such systems fail to
provide developers with enough information to find root causes and
produce corrective actions, resulting in extra effort to reproduce
failures. Logging the results of each SUIT command can simplify this
process.</t>

<t>While it is possible to report the results of SUIT commands through
existing logging or attestation mechanisms, this comes with several
drawbacks:</t>

<t><list style="symbols">
  <t>data inflation, particularly when designed for text-based logging</t>
  <t>missing information elements</t>
  <t>missing support for multiple components</t>
</list></t>

<t>The CBOR objects defined in this document allow devices to:</t>

<t><list style="symbols">
  <t>report a trace of how an update was performed</t>
  <t>report expected vs. actual values for critical checks</t>
  <t>describe the installation of complex multi-component architectures</t>
  <t>describe the measured properties of a system</t>
  <t>report the exact reason for a parsing failure</t>
</list></t>

<t>This document provides a definition of a SUIT-specific logging container
that may be used in a variety of scenarios.</t>

</section>
<section anchor="terminology"><name>Conventions and Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Terms used in this specification include:</t>

<t><list style="symbols">
  <t>Boot: initialization of an executable image. Although this
specification refers to boot, any boot-specific operations described
are equally applicable to starting an executable in an OS context.</t>
</list></t>

</section>
<section anchor="the-suit-record"><name>The SUIT Record</name>

<t>If the developer can be assumed to have a copy of the
manifest, then they need little information to reconstruct what the
manifest processor has done. They simply need any data that influences
the control flow of the manifest. The manifest only supports the
following control flow primitives:</t>

<t><list style="symbols">
  <t>Set Component</t>
  <t>Set/Override Parameters</t>
  <t>Try-Each</t>
  <t>Run Sequence</t>
  <t>Conditions</t>
</list></t>

<t>Of these, only conditions change the behavior of the processor from the
default, and then only when the condition fails.</t>

<t>Then, to reconstruct the flow of a manifest, all a developer needs is
a list of metadata about failed conditions:</t>

<t><list style="symbols">
  <t>the current manifest</t>
  <t>the current section</t>
  <t>the offset into the current section</t>
  <t>the current component index</t>
  <t>the "reason" for failure</t>
</list></t>

<t>Most conditions compare a parameter to an actual value, so the "reason"
is typically simply the actual value.</t>

<t>Since it is possible that a non-condition command (directive) may fail in an
exceptional circumstance, this must be included as well. However, 
a failed directive will terminate processing of the manifest. To accommodate
for a failed command and for explicit "completion," an additional "result"
element is added as well. In the case of a command failure,
the failure reason is typically a numeric error code. However, these error
codes need to be standardised in order to be useful.</t>

<t>Reconstructing what a device has done in this way is compact,
however it requires some reconstruction effort. This is an issue that
can be solved by tooling.</t>

<figure><artwork><![CDATA[
SUIT_Record = [
    suit-record-manifest-id        : [* uint ],
    suit-record-manifest-section   : int,
    suit-record-section-offset     : uint,
    suit-record-component-index    : uint,
    suit-record-properties         : SUIT_Parameters,
    $$SUIT_Record_Extensions
]
]]></artwork></figure>

<t>suit-record-manifest-id is used to identify which manifest contains the
command that caused the record to be generated. The manifest id is a
list of integers that form a walk of the manifest tree, starting at the
root. An empty list indicates that the command was contained in the
root manifest. If the list is not empty, the command was contained in
one of the root manifest's dependencies, or nested even further below
that.</t>

<t>For example, suppose that the root manifest has 3 dependencies
and each of those dependencies has 2 dependencies of its own:</t>

<t><list style="symbols">
  <t>Root  <list style="symbols">
      <t>Dependency A      <list style="symbols">
          <t>Dependency A0</t>
          <t>Dependency A1</t>
        </list></t>
      <t>Dependency B      <list style="symbols">
          <t>Dependency B0</t>
          <t>Dependency B1</t>
        </list></t>
      <t>Dependency C      <list style="symbols">
          <t>Dependency C0</t>
          <t>Dependency C1</t>
        </list></t>
    </list></t>
</list></t>

<t>A manifest-id of [1,0] would indicate that the current command was
contained within Dependency B0. Similarly, a manifest-id of [2,1]
would indicate Dependency C1</t>

<t>suit-record-manifest-section indicates which section of the manifest was
active. This is used in addition to an offset so that the developer can
index into severable sections in a predictable way. The value of this
element is the value of the key that identified the section in the
manifest.</t>

<t>suit-record-section-offset is the number of bytes into the current
section at which the current command is located.</t>

<t>suit-record-component-index is the index of the component that was
specified at the time that the report was generated. This field is
necessary due to the availability of set-current-component values of
True and a list of components. Both of these values cause the manifest
processor to loop over commands using a series of component-ids, so the
developer needs to know which was selected when the command executed.</t>

<t>suit-record-properties contains any measured properties that led to the
command failure.
For example, this could be the actual value of a SUIT_Digest or
class identifier. This is encoded in a SUIT_Parameters block as defined
in <xref target="I-D.ietf-suit-manifest"/>.</t>

</section>
<section anchor="the-suitreport"><name>The SUIT_Report</name>

<t>Some metadata is common to all records, such as the root manifest:
the manifest that is the entry-point for the manifest processor. This
metadata is aggregated with a list of SUIT_Records. The SUIT_Report
may also contain a list of any system properties that were measured
and reported, and a reason for a failure if one occured.</t>

<figure><artwork><![CDATA[
SUIT_Report = {
  suit-reference              => SUIT_Reference,
  ? suit-report-nonce         => bstr,
  suit-report-records         => [ * SUIT_Record / system-property-claims ],
  suit-report-result          => true / {
    suit-report-result-code   => int, ; could condense to enum later
    suit-report-result-record => SUIT_Record,
  }
  $$SUIT_Report_Extensions
}
system-property-claims = {
  system-component-id => SUIT_Component_Identifier,
  + SUIT_Parameters,
}
]]></artwork></figure>

<t>The suit-reference provides a reference URI and digest for a suit
manifest. The uri <bcp14>SHOULD</bcp14> be the canonical URI that is provided in the
manifest. The digest is the digest of the manifest.</t>

<t>NOTE: The digest is used
in preference to other identifiers in the manifest because it allows
a manifest to be uniquely identified (collision resistance) whereas
other identifiers, such as the sequence number, can collide,
particularly in scenarios with multiple trusted signers.</t>

<t>The following CDDL describes a SUIT_Reference.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Reference = {
    suit-report-manifest-uri  : tstr,
    suit-report-manifest-digest : SUIT_Digest,
}
]]></sourcecode></figure>

<t>suit-report-manifest-digest provides a SUIT_Digest (as defined in
<xref target="I-D.ietf-suit-manifest"/>) that is the characteristic digest of the
Root manifest.</t>

<t>suit-report-manifest-uri provides the reference URI that was provided in
the root manifest.</t>

<t>suit-report-nonce provides a container for freshness or replay
protection information. This field <bcp14>MAY</bcp14> be omitted where the suit-report
is authenticated within a container that provides freshness already.
For example, attestation evidence typically contains a proof of
freshness.</t>

<t>suit-report-records is a list of 0 or more SUIT Records or 
system-property-claims. Because SUIT Records are only generated on failure,
in simple cases this can be an empty list. SUIT_Records and 
suit-system-property-claims are merged into a single list because this
reduces the overhead for a constrained node that generates this report.
The use of a single append-only log allows report generators to use simple
memory management. Because the system-property-claims are encoded as maps
and SUIT_Records are encoded as lists, a recipient need only filter the
CBOR Type-5 entries from suit-report-records to obtain all 
system-property-claims.</t>

<t>System properties can be extracted from suit-report-records by filtering
suit-report-records for maps. System Properties are a list of measured 
or asserted properties
of the system that creates the SUIT_Report. These properties are scoped by
component identifier. Because this list is expected to be constructed on
the fly by a constrained node, component identifiers may appear more than
once. A recipient may convert the result to a more conventional structure:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Record_System_Properties = {
  * component-id => {
    + SUIT_Parameters,
  }
}
]]></sourcecode></figure>

<t>suit-report-result provides a mechanism to show that the SUIT procedure
completed successfully (value is true) or why it failed (value is a map
of an error code and a SUIT_Record).</t>

<t>The suit-report-result-code indicates the reason for the failure. Values
are expected to be CBOR parsing failures, Schema validation failures,
COSE validation failures or SUIT processing failures.</t>

<t>The suit-report-result-record indicates the exact point in the manifest
or manifest dependency tree where the error occured.</t>

</section>
<section anchor="attestation"><name>Attestation</name>

<t>This document describes how a well-informed verifier can infer the trustworthiness of a remote device. Remote attestation is done by using the SUIT_Manifest_Envelope along with the SUIT_Report to reconstruct the state of the device at boot time. By embedding data used for remote attestation in the SUIT_Report, a remote device can use an append-only log to collect both measurements and debug/failure information into the same document. This document can then be conveyed to a verifier as a part of the attestation evidence. A remote attestation format to convey attestation evidence, such as an Entity Attestation Token (EAT, see <xref target="I-D.ietf-rats-eat"/>), that contains a SUIT_Report <bcp14>MUST</bcp14> also include an integrity measurement of the Manifest Processor &amp; Report Generator.</t>

<t>When a Concise Reference Integrity Manifest (CoRIM, see <xref target="I-D.birkholz-rats-corim"/> is delivered in a SUIT_Manifest_Envelope, this codifies the delivery of verification information to the verifier:</t>

<t><list style="symbols">
  <t>The Firmware Distributor:
  <list style="symbols">
      <t>sends the SUIT_Manifest_Envelope to the Verifier without payload or text, but with CoRIM</t>
      <t>sends the SUIT_Manifest_Envelope to the recipient without CoRIM, or text, but with payload</t>
    </list></t>
  <t>The Recipient:
  <list style="symbols">
      <t>Installs the firmware as described in the SUIT_Manifest and generates a SUIT_report, which is encapsulated in an EAT by the installer and sent to the Firmware Distributor.</t>
      <t>Boots the firmware as described in the SUIT_Manifest and creates a SUIT_report, which is encapsulated in an EAT by the installer and sent to the Firmware Distributor.</t>
    </list></t>
  <t>The Firmware Distributor sends both reports to the verifier (separately or together)</t>
  <t>The Verifier:
  <list style="symbols">
      <t>Reconstructs the state of the device using the manifest</t>
      <t>Compares this state to the CoRIM</t>
      <t>Returns an Attestation Report to the Firmware Distributor</t>
    </list></t>
</list></t>

<t>This approach simplifies the design of the bootloader since it is able to use an append-only log. It allows a verifier to validate this report against a signed CoRIM that is provided by the firmware author, which simplifies the delivery chain of verification information to the verifier.</t>

<t>This information is not intended as Attestation Evidence and while an Attestation Report <bcp14>MAY</bcp14> provide this information for conveying error codes and/or failure reports, it <bcp14>SHOULD</bcp14> be translated into general-purpose claims for use by the Relying Party.</t>

</section>
<section anchor="capability-reporting"><name>Capability Reporting</name>

<t>Because SUIT is extensible, a manifest author must know what capabilities a device has available. To enable this, a capability report is a set of lists that define which commands, parameters, algorithms, and component IDs are supported by a manifest processor.</t>

<t>The CDDL for a SUIT_Capability_Report follows:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Capability_Report = {
  suit-component-capabilities        => [+ SUIT_Component_Capability ]
  suit-command-capabilities          => [+ int],
  suit-parameters-capabilities       => [+ int],
  suit-crypt-algo-capabilities       => [+ int],
  ? suit-envelope-capabilities       => [+ int],
  ? suit-manifest-capabilities       => [+ int],
  ? suit-common-capabilities         => [+ int],
  ? suit-text-component-capabilities => [+ int],
  ? suit-text-capabilities           => [+ int],
  ? suit-dependency-capabilities     => [+ int],
  * [+int]                           => [+ int],
  $$SUIT_Capability_Report_Extensions
}

SUIT_Component_Capability = [*bstr,?true]
]]></sourcecode></figure>

<t>A SUIT_Component_Capability is similar to a SUIT_Component_ID, with one difference: it may optionally be terminated by a CBOR 'true' which acts as a wild-card match for any component with a prefix matching the SUIT_Component_Capability leading up to the 'true.' This feature is for use with filesystem storage, key value stores, or any other arbitrary-component-id storage systems.</t>

<t>When reporting capabilities, it is <bcp14>OPTIONAL</bcp14> to report capabilities that are declared mandatory by the SUIT Manifest <xref target="I-D.ietf-suit-manifest"/>. Capabilities defined by extensions <bcp14>MUST</bcp14> be reported.</t>

<t>Additional capability reporting can be added as follows: if a manifest element does not exist in this map, it can be added by specifying the CBOR path to the manifest element in an array and using this as the key. For example SUIT_Dependencies, as described in <xref target="I-D.ietf-suit-trust-domains"/> could have an extension added, which was key 3 in the SUIT_Dependencies map. This capability would be reported as: [3, 3, 1] =&gt; [3], where the key consists of the key for SUIT_Manifest (3), the key for SUIT_Common (3), and the key for SUIT_Dependencies (1). Then the value indicates that this manifest processor supports the extension (3).</t>

</section>
<section anchor="eat"><name>EAT Claim</name>

<t>The SUIT_Report is a form of measurement done by the SUIT Manifest Processor as it attempts to invoke a manifest or install a manifest. As a result, the SUIT_Report can be captured in an EAT measurements type.
The Verifier <bcp14>MAY</bcp14> convert a SUIT_Report into a more consumable version of the EAT claim by, for example, constructing a measres claim that contains the digest of a component, the vendor ID &amp; class ID of a component, etc.</t>

</section>
<section anchor="container"><name>SUIT_Report container</name>

<t>The SUIT_Report <bcp14>MUST</bcp14> be carried in a container or transport that ensures authenticity. The SUIT_Report <bcp14>MUST</bcp14> be transported using one of the following options:</t>

<t><list style="symbols">
  <t>As an element of an existing document that ensures authenticity, such as in a measurements claim in an EAT.</t>
  <t>As the payload of a message delivered over secure transport, such as a CoAP or LwM2M message.</t>
  <t>Contained within a secure container that conforms to the current recommendations of <xref target="I-D.ietf-suit-mti"/>.</t>
</list></t>

<t>In this case, the SUIT_Report is carried as sole payload of a COSE_Encrypt0 or COSE_Sign1 as shown in the CDDL snippet below.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Report_Protected /= SUIT_Report_COSE_Sign1 .and SUIT_COSE_Profiles
SUIT_Report_Protected /= SUIT_Report_COSE_Sign1_Tagged .and SUIT_COSE_Profiles
SUIT_Report_Protected /= SUIT_Report_COSE_MAC0 .and SUIT_COSE_Profiles
SUIT_Report_Protected /= SUIT_Report_COSE_MAC0_Tagged .and SUIT_COSE_Profiles

SUIT_Report_COSE_Sign1_Tagged = #6.18(SUIT_Report_COSE_Sign1)
SUIT_Report_COSE_Sign1 = [
    protected : bstr,
    unprotected : {* int => any},
    payload : bstr .cbor SUIT_Report_Unprotected,
    signature : bstr
]
SUIT_Report_COSE_MAC0_Tagged = #6.17(SUIT_Report_COSE_MAC0)
SUIT_Report_COSE_MAC0 = [
    protected : bstr,
    unprotected : {* int => any},
    payload : bstr .cbor SUIT_Report_Unprotected,
    tag : bstr
]
SUIT_Report_Unprotected = SUIT_Report / SUIT_Report_COSE_Encrypt0
SUIT_Report_COSE_Encrypt0 = COSE_Encrypt0
]]></sourcecode></figure>

<t>Note that SUIT_Report_COSE_Sign1 and SUIT_Report_COSE_MAC0 <bcp14>MUST</bcp14> be combined with a SUIT_COSE_Profile from <xref target="I-D.ietf-suit-mti"/> using the CDDL .and directive. The SUIT_Report_COSE_Encrypt0 carries a ciphertext payload that <bcp14>MUST</bcp14> contain just the ciphertext obtained by encrypting the following CDDL:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Report_plaintext = bstr .cbor SUIT_Report
]]></sourcecode></figure>

<t>SUIT_COSE_Profiles define only AES-CTR encryption due to its suitability for firmware distribution. Because AES-CTR is not authenticated, SUIT_Report_Protected defines authenticated containers with an encrypted payload.</t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to allocate a CBOR tag and a coap content-type each for the SUIT_Report, SUIT_Reference, and SUIT_Capability_Report CBOR data structures.</t>

<t>IANA is also requested to add a table to the SUIT page for SUIT_Capability_Report_Extensions.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>There are two aspects to the security considerations for SUIT reports:
authenticity and confidentiality. SUIT reports must have guaranteed
authenticity for them to be useful. Several options are available to
ensure the authenticity of a SUIT report. The report <bcp14>MAY</bcp14> be bundled
as the payload of a cryptographic container as described in <xref target="container"/>.
communicated over a secure transport. It may also be communicated as
part of an existing authenticated protocol, such as within an EAT 
token. Ideally, the SUIT_Report <bcp14>SHOULD</bcp14> be communicated as part of an
attestation flow, such as within an EAT token, since this proves the
authenticity of the environment (hardware, software, or both) in which
the SUIT_Report was generated.</t>

<t>The SUIT_Report <bcp14>MAY</bcp14> require confidentiality as well. A SUIT_Report
could potentially reveal confidential information about the kinds of
device that a particular user has. It could also reveal confidential
information about intellectual property contained in a device. Where
these concerns are relevant, the SUIT_Report <bcp14>MUST</bcp14> be encrypted, for 
example using a COSE_Encrypt as described in <xref target="container"/>, or by using
secure transport.</t>

<t>There are also operational considerations that intersect with these
security considerations. In situations where the SUIT report is
encrypted as an element of a message within another protocol, care must
be taken to ensure that this does not leak information and that the
principle of least privilege is respected. For example, in an EAT-based
attestation workflow, the Verifier often will not need the full SUIT
Report. Similarly, the Relying Party may also not need the SUIT_Report.
In this case, the SUIT_Report <bcp14>MUST</bcp14> be encrypted even if the EAT token
that contains it is also encrypted.</t>

<t>In contrast, however, there are scenarios where the EAT Verifier
consumes the SUIT report and translates it into one or more other
EAT claims. For example, a SUIT report that shows a particular digest
was matched using an suit-condition-image can be translated into a
EAT measres (Measurement Results) claim. In this scenario, the Verifier
must have access to the full SUIT_Report.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>The authors would like to thank Dave Thaler for his feedback.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>




<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='10' month='September' year='2023'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-23'/>
   
</reference>

<reference anchor='RFC2119'>
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname='S. Bradner' initials='S.' surname='Bradner'/>
    <date month='March' year='1997'/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='2119'/>
  <seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>

<reference anchor='RFC8174'>
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname='B. Leiba' initials='B.' surname='Leiba'/>
    <date month='May' year='2017'/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='8174'/>
  <seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-rats-eat'>
   <front>
      <title>The Entity Attestation Token (EAT)</title>
      <author fullname='Laurence Lundblade' initials='L.' surname='Lundblade'>
         <organization>Security Theory LLC</organization>
      </author>
      <author fullname='Giridhar Mandyam' initials='G.' surname='Mandyam'>
         <organization>Qualcomm Technologies Inc.</organization>
      </author>
      <author fullname='Jeremy O&#x27;Donoghue' initials='J.' surname='O&#x27;Donoghue'>
         <organization>Qualcomm Technologies Inc.</organization>
      </author>
      <author fullname='Carl Wallace' initials='C.' surname='Wallace'>
         <organization>Red Hound Software, Inc.</organization>
      </author>
      <date day='30' month='June' year='2023'/>
      <abstract>
	 <t>   An Entity Attestation Token (EAT) provides an attested claims set
   that describes state and characteristics of an entity, a device like
   a smartphone, IoT device, network equipment or such.  This claims set
   is used by a relying party, server or service to determine how much
   it wishes to trust the entity.

   An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with
   attestation-oriented claims.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-rats-eat-21'/>
   
</reference>


<reference anchor='I-D.birkholz-rats-corim'>
   <front>
      <title>Concise Reference Integrity Manifest</title>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Thomas Fossati' initials='T.' surname='Fossati'>
         <organization>arm</organization>
      </author>
      <author fullname='Yogesh Deshpande' initials='Y.' surname='Deshpande'>
         <organization>arm</organization>
      </author>
      <author fullname='Ned Smith' initials='N.' surname='Smith'>
         <organization>Intel</organization>
      </author>
      <author fullname='Wei Pan' initials='W.' surname='Pan'>
         <organization>Huawei Technologies</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   Remote Attestation Procedures (RATS) enable Relying Parties to assess
   the trustworthiness of a remote Attester and therefore to decide
   whether to engage in secure interactions with it.  Evidence about
   trustworthiness can be rather complex and it is deemed unrealistic
   that every Relying Party is capable of the appraisal of Evidence.
   Therefore that burden is typically offloaded to a Verifier.  In order
   to conduct Evidence appraisal, a Verifier requires not only fresh
   Evidence from an Attester, but also trusted Endorsements and
   Reference Values from Endorsers and Reference Value Providers, such
   as manufacturers, distributors, or device owners.  This document
   specifies Concise Reference Integrity Manifests (CoRIM) that
   represent Endorsements and Reference Values in CBOR format.
   Composite devices or systems are represented by a collection of
   Concise Module Identifiers (CoMID) and Concise Software Identifiers
   (CoSWID) bundled in a CoRIM document.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-birkholz-rats-corim-03'/>
   
</reference>


<reference anchor='I-D.ietf-suit-trust-domains'>
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='11' month='September' year='2023'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT Manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it enables delegation of different rights to mutually distrusting
   entities for use for different purposes or Components in the context
   of firmware or software update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-trust-domains-05'/>
   
</reference>


<reference anchor='I-D.ietf-suit-mti'>
   <front>
      <title>Mandatory-to-Implement Algorithms for Authors and Recipients of Software Update for the Internet of Things manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <author fullname='Akira Tsukamoto' initials='A.' surname='Tsukamoto'>
         <organization>ALAXALA Networks Corp.</organization>
      </author>
      <date day='1' month='September' year='2023'/>
      <abstract>
	 <t>   This document specifies algorithm profiles for SUIT manifest parsers
   and authors to ensure better interoperability.  These profiles apply
   specifically to a constrained node software update use case.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-mti-02'/>
   
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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
r7XrTwAA

-->

</rfc>

