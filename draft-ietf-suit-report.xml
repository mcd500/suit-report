<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-report-05" category="info">

  <front>
    <title abbrev="Secure Reporting of Update Status">Secure Reporting of Update Status</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2023" month="March" day="13"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The Software Update for the Internet of Things (SUIT) manifest provides
a way for many different update and boot
workflows to be described by a common format. However, this does not
provide a feedback mechanism for developers in the event that an update
or boot fails.</t>

<t>This specification describes a lightweight feedback mechanism that
allows a developer in possession of a manifest to reconstruct the
decisions made and actions performed by a manifest processor.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A SUIT manifest processor can fail to install or boot an update for many
reasons. Frequently, the error codes generated by such systems fail to
provide developers with enough information to find root causes and
produce corrective actions, resulting in extra effort to reproduce
failures. Logging the results of each SUIT command can simplify this
process.</t>

<t>While it is possible to report the results of SUIT commands through
existing logging or attestation mechanisms, this comes with several
drawbacks:</t>

<t><list style="symbols">
  <t>data inflation, particularly when designed for text-based logging</t>
  <t>missing information elements</t>
  <t>missing support for multiple components</t>
</list></t>

<t>The CBOR objects defined in this document allow devices to:</t>

<t><list style="symbols">
  <t>report a trace of how an update was performed</t>
  <t>report expected vs. actual values for critical checks</t>
  <t>describe the installation of complex multi-component architectures</t>
  <t>describe the measured properties of a system</t>
  <t>report the exact reason for a parsing failure</t>
</list></t>

<t>This document provides a definition of a SUIT-specific logging container
that may be used in a variety of scenarios.</t>

</section>
<section anchor="terminology"><name>Conventions and Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL</bcp14>
NOT", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Terms used in this specification include:</t>

<t><list style="symbols">
  <t>Boot: initialization of an executable image. Although this
specification refers to boot, any boot-specific operations described
are equally applicable to starting an executable in an OS context.</t>
</list></t>

</section>
<section anchor="the-suit-record"><name>The SUIT Record</name>

<t>If the developer can be assumed to have a copy of the
manifest, then they need little information to reconstruct what the
manifest processor has done. They simply need any data that influences
the control flow of the manifest. The manifest only supports the
following control flow primitives:</t>

<t><list style="symbols">
  <t>Set Component</t>
  <t>Set/Override Parameters</t>
  <t>Try-Each</t>
  <t>Run Sequence</t>
  <t>Conditions</t>
</list></t>

<t>Of these, only conditions change the behavior of the processor from the
default, and then only when the condition fails.</t>

<t>Then, to reconstruct the flow of a manifest, all a developer needs is
a list of metadata about failed conditions:</t>

<t><list style="symbols">
  <t>the current manifest</t>
  <t>the current section</t>
  <t>the offset into the current section</t>
  <t>the current component index</t>
  <t>the "reason" for failure</t>
</list></t>

<t>Most conditions compare a parameter to an actual value, so the "reason"
is typically simply the actual value.</t>

<t>Since it is possible that a non-condition command (directive) may fail in an
exceptional circumstance, this must be included as well. However, 
a failed directive will terminate processing of the manifest. To accommodate
for a failed command and for explicit "completion," an additional "result"
element is added as well. In the case of a command failure,
the failure reason is typically a numeric error code. However, these error
codes need to be standardised in order to be useful.</t>

<t>Reconstructing what a device has done in this way is compact,
however it requires some reconstruction effort. This is an issue that
can be solved by tooling.</t>

<figure><artwork><![CDATA[
SUIT_Record = [
    suit-record-manifest-id        : [* uint ],
    suit-record-manifest-section   : int,
    suit-record-section-offset     : uint,
    suit-record-component-index    : uint,
    suit-record-properties         : SUIT_Parameters,
    $$SUIT_Record_Extensions
]
]]></artwork></figure>

<t>suit-record-manifest-id is used to identify which manifest contains the
command that caused the record to be generated. The manifest id is a
list of integers that form a walk of the manifest tree, starting at the
root. An empty list indicates that the command was contained in the
root manifest. If the list is not empty, the command was contained in
one of the root manifest's dependencies, or nested even further below
that.</t>

<t>For example, suppose that the root manifest has 3 dependencies
and each of those dependencies has 2 dependencies of its own:</t>

<t><list style="symbols">
  <t>Root  <list style="symbols">
      <t>Dependency A      <list style="symbols">
          <t>Dependency A0</t>
          <t>Dependency A1</t>
        </list></t>
      <t>Dependency B      <list style="symbols">
          <t>Dependency B0</t>
          <t>Dependency B1</t>
        </list></t>
      <t>Dependency C      <list style="symbols">
          <t>Dependency C0</t>
          <t>Dependency C1</t>
        </list></t>
    </list></t>
</list></t>

<t>A manifest-id of [1,0] would indicate that the current command was
contained within Dependency B0. Similarly, a manifest-id of [2,1]
would indicate Dependency C1</t>

<t>suit-record-manifest-section indicates which section of the manifest was
active. This is used in addition to an offset so that the developer can
index into severable sections in a predictable way. The value of this
element is the value of the key that identified the section in the
manifest.</t>

<t>suit-record-section-offset is the number of bytes into the current
section at which the current command is located.</t>

<t>suit-record-component-index is the index of the component that was
specified at the time that the report was generated. This field is
necessary due to the availability of set-current-component values of
True and a list of components. Both of these values cause the manifest
processor to loop over commands using a series of component-ids, so the
developer needs to know which was selected when the command executed.</t>

<t>suit-record-properties contains any measured properties that led to the
command failure.
For example, this could be the actual value of a SUIT_Digest or
class identifier. This is encoded in a SUIT_Parameters block as defined
in <xref target="I-D.ietf-suit-manifest"/>.</t>

</section>
<section anchor="the-suit-report"><name>The SUIT Report</name>

<t>Some metadata is common to all records, such as the root manifest:
the manifest that is the entry-point for the manifest processor. This
metadata is aggregated with a list of SUIT_Records. The SUIT_Report
may also contain a list of any system properties that were measured
and reported, and a reason for a failure if one occured.</t>

<figure><artwork><![CDATA[
SUIT_Report = {
  suit-reference              => SUIT_Reference,
  ? suit-report-nonce         => bstr,
  suit-report-records         => [ * SUIT_Record / system-property-claims ],
  suit-report-result          => true / {
    suit-report-result-code   => int, ; could condense to enum later
    suit-report-result-record => SUIT_Record,
  }
  $$SUIT_Report_Extensions
}
system-property-claims = {
  system-component-id => SUIT_Component_Identifier,
  + SUIT_Parameters,
}
]]></artwork></figure>

<t>The suit-reference provides a reference URI and digest for a suit
manifest. The uri <bcp14>SHOULD</bcp14> be the canonical URI that is provided in the
manifest. The digest is the digest of the manifest.</t>

<t>NOTE: The digest is used
in preference to other identifiers in the manifest because it allows
a manifest to be uniquely identified (collision resistance) whereas
other identifiers, such as the sequence number, can collide,
particularly in scenarios with multiple trusted signers.</t>

<t>The following CDDL describes a SUIT_Reference.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Reference = {
    suit-report-manifest-uri  : tstr,
    suit-report-manifest-digest : SUIT_Digest,
}
]]></sourcecode></figure>

<t>suit-report-manifest-digest provides a SUIT_Digest (as defined in
<xref target="I-D.ietf-suit-manifest"/>) that is the characteristic digest of the
Root manifest.</t>

<t>suit-report-manifest-uri provides the reference URI that was provided in
the root manifest.</t>

<t>suit-report-nonce provides a container for freshness or replay
protection information. This field <bcp14>MAY</bcp14> be omitted where the suit-report
is authenticated within a container that provides freshness already.
For example, attestation evidence typically contains a proof of
freshness.</t>

<t>suit-report-records is a list of 0 or more SUIT Records or 
system-property-claims. Because SUIT Records are only generated on failure,
in simple cases this can be an empty list. SUIT_Records and 
suit-system-property-claims are merged into a single list because this
reduces the overhead for a constrained node that generates this report.
The use of a single append-only log allows report generators to use simple
memory management. Because the system-property-claims are encoded as maps
and SUIT_Records are encoded as lists, a recipient need only filter the
CBOR Type-5 entries from suit-report-records to obtain all 
system-property-claims.</t>

<t>System properties can be extracted from suit-report-records by filtering
suit-report-records for maps. System Properties are a list of measured 
or asserted properties
of the system that creates the suit report. These properties are scoped by
component identifier. Because this list is expected to be constructed on
the fly by a constrained node, component identifiers may appear more than
once. A recipient may convert the result to a more conventional structure:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Record_System_Properties = {
  * component-id => {
    + SUIT_Parameters,
  }
}
]]></sourcecode></figure>

<t>suit-report-result provides a mechanism to show that the SUIT procedure
completed successfully (value is true) or why it failed (value is a map
of an error code and a SUIT_Record).</t>

<t>The suit-report-result-code indicates the reason for the failure. Values
are expected to be CBOR parsing failures, Schema validation failures,
COSE validation failures or SUIT processing failures.</t>

<t>The suit-report-result-record indicates the exact point in the manifest
or manifest dependency tree where the error occured.</t>

</section>
<section anchor="attestation"><name>Attestation</name>

<t>This document describes how a well-informed verifier can infer the trustworthiness of a remote device. Remote attestation is done by using the SUIT_Manifest_Envelope along with the SUIT_Report to reconstruct the state of the device at boot time. By embedding data used for remote attestation in the SUIT_Report, a remote device can use an append-only log to collect both measurements and debug/failure information into the same document. This document can then be conveyed to a verifier as a part of the attestation evidence. A remote attestation format to convey attestation evidence, such as an Entity Attestation Token (EAT, see <xref target="I-D.ietf-rats-eat"/>), that contains a SUIT_Report <bcp14>MUST</bcp14> also include an integrity measurement of the Manifest Processor &amp; Report Generator.</t>

<t>When a Concise Reference Integrity Manifest (CoRIM, see <xref target="I-D.birkholz-rats-corim"/> is delivered in a SUIT_Manifest_Envelope, this codifies the delivery of verification information to the verifier:</t>

<t><list style="symbols">
  <t>The Firmware Distributor:
  <list style="symbols">
      <t>sends the SUIT_Manifest_Envelope to the Verifier without payload or text, but with CoRIM</t>
      <t>sends the SUIT_Manifest_Envelope to the recipient without CoRIM, or text, but with payload</t>
    </list></t>
  <t>The Recipient:
  <list style="symbols">
      <t>Installs the firmware as described in the SUIT_Manifest and generates a SUIT_report, which is encapsulated in an EAT by the installer and sent to the Firmware Distributor.</t>
      <t>Boots the firmware as described in the SUIT_Manifest and creates a SUIT_report, which is encapsulated in an EAT by the installer and sent to the Firmware Distributor.</t>
    </list></t>
  <t>The Firmware Distributor sends both reports to the verifier (separately or together)</t>
  <t>The Verifier:
  <list style="symbols">
      <t>Reconstructs the state of the device using the manifest</t>
      <t>Compares this state to the CoRIM</t>
      <t>Returns an Attestation Report to the Firmware Distributor</t>
    </list></t>
</list></t>

<t>This approach simplifies the design of the bootloader since it is able to use an append-only log. It allows a verifier to validate this report against a signed CoRIM that is provided by the firmware author, which simplifies the delivery chain of verification information to the verifier.</t>

<t>This information is not intended as Attestation Evidence and while an Attestation Report <bcp14>MAY</bcp14> provide this information for conveying error codes and/or failure reports, it <bcp14>SHOULD</bcp14> be translated into general-purpose claims for use by the Relying Party.</t>

</section>
<section anchor="capability-reporting"><name>Capability Reporting</name>

<t>Because SUIT is extensible, a manifest author must know what capabilities a device has available. To enable this, a capability report is a set of lists that define which commands, parameters, algorithms, and component IDs are supported by a manifest processor.</t>

<t>The CDDL for a SUIT_Capability_Report follows:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Capability_Report = {
  suit-component-capabilities        => [+ SUIT_Component_Capability ]
  suit-command-capabilities          => [+ int],
  suit-parameters-capabilities       => [+ int],
  suit-crypt-algo-capabilities       => [+ int],
  ? suit-envelope-capabilities       => [+ int],
  ? suit-manifest-capabilities       => [+ int],
  ? suit-common-capabilities         => [+ int],
  ? suit-text-component-capabilities => [+ int],
  ? suit-text-capabilities           => [+ int],
  ? suit-dependency-capabilities     => [+ int],
  * [+int]                           => [+ int],
  $$SUIT_Capability_Report_Extensions
}

SUIT_Component_Capability = [*bstr,?true]
]]></sourcecode></figure>

<t>A SUIT_Component_Capability is similar to a SUIT_Component_ID, with one difference: it may optionally be terminated by a CBOR 'true' which acts as a wild-card match for any component with a prefix matching the SUIT_Component_Capability leading up to the 'true.' This feature is for use with filesystem storage, key value stores, or any other arbitrary-component-id storage systems.</t>

<t>When reporting capabilities, it is <bcp14>OPTIONAL</bcp14> to report capabilities that are declared mandatory by the SUIT Manifest <xref target="I-D.ietf-suit-manifest"/>. Capabilities defined by extensions <bcp14>MUST</bcp14> be reported.</t>

<t>Additional capability reporting can be added as follows: if a manifest element does not exist in this map, it can be added by specifying the CBOR path to the manifest element in an array and using this as the key. For example SUIT_Dependencies, as described in <xref target="I-D.ietf-suit-trust-domains"/> could have an extension added, which was key 3 in the SUIT_Dependencies map. This capability would be reported as: [3, 3, 1] =&gt; [3], where the key consists of the key for SUIT_Manifest (3), the key for SUIT_Common (3), and the key for SUIT_Dependencies (1). Then the value indicates that this manifest processor supports the extension (3).</t>

</section>
<section anchor="eat-claim"><name>EAT Claim</name>

<t>The SUIT Report is a form of measurement done by the SUIT Manifest Processor as it attempts to invoke a manifest or install a manifest. As a result, the SUIT Report can be captured in an EAT mesres (Software Measurements Results) type.</t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to allocate a CBOR tag and a coap content-type for the SUIT Report.</t>

<t>IANA is requested to allocate a CBOR tag and a coap content-type for the SUIT_Reference.</t>

<t>IANA is also requested to add a table to the SUIT page for SUIT_Capability_Report_Extensions.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>There are two aspects to the security considerations for SUIT reports:
authenticity and confidentiality. SUIT reports must have guaranteed
authenticity for them to be useful. Several options are available to
ensure the authenticity of a SUIT report. The report <bcp14>MAY</bcp14> be bundled
as the payload of a cryptographic container that provides authenticity,
such as COSE_Sign, COSE_MAC, or COSE_Encrypt. The SUIT Report <bcp14>MAY</bcp14> be
communicated over a secure transport. It may also be communicated as
part of an existing authenticated protocol, such as within an EAT 
token. Ideally, the SUIT Report <bcp14>SHOULD</bcp14> be communicated as part of an
attestation flow, such as within an EAT token, since this proves the
authenticity of the environment (hardware, software, or both) in which
the SUIT Report was generated.</t>

<t>The SUIT Report <bcp14>MAY</bcp14> require confidentiality as well. A SUIT Report
could potentially reveal confidential information about the kinds of
device that a particular user has. It could also reveal confidential
information about intellectual property contained in a device. Where
these concerns are relevant, the SUIT Report <bcp14>MUST</bcp14> be encrypted, for 
example using a COSE_Encrypt, or secure transport.</t>

<t>There are also operational considerations that intersect with these
security considerations. In situations where the SUIT report is
encrypted as an element of a message within another protocol, care must
be taken to ensure that this does not leak information and that the
principle of least privilege is respected. For example, in an EAT-based
attestation workflow, the Verifier often will not need the full SUIT
Report. Similarly, the Relying Party may also not need the SUIT Report.
In this case, the SUIT Report <bcp14>MUST</bcp14> be encrypted even if the EAT token
that contains it is also encrypted.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>The authors would like to thank Dave Thaler for his feedback.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>




<reference anchor='I-D.ietf-suit-manifest' target='https://datatracker.ietf.org/doc/html/draft-ietf-suit-manifest-22'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='27' month='February' year='2023'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-22'/>
   
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-rats-eat' target='https://datatracker.ietf.org/doc/html/draft-ietf-rats-eat-19'>
   <front>
      <title>The Entity Attestation Token (EAT)</title>
      <author fullname='Laurence Lundblade' initials='L.' surname='Lundblade'>
         <organization>Security Theory LLC</organization>
      </author>
      <author fullname='Giridhar Mandyam' initials='G.' surname='Mandyam'>
         <organization>Qualcomm Technologies Inc.</organization>
      </author>
      <author fullname='Jeremy O&#39;Donoghue' initials='J.' surname='O&#39;Donoghue'>
         <organization>Qualcomm Technologies Inc.</organization>
      </author>
      <author fullname='Carl Wallace' initials='C.' surname='Wallace'>
         <organization>Red Hound Software, Inc.</organization>
      </author>
      <date day='19' month='December' year='2022'/>
      <abstract>
	 <t>   An Entity Attestation Token (EAT) provides an attested claims set
   that describes state and characteristics of an entity, a device like
   a smartphone, IoT device, network equipment or such.  This claims set
   is used by a relying party, server or service to determine how much
   it wishes to trust the entity.

   An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with
   attestation-oriented claims.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-rats-eat-19'/>
   
</reference>


<reference anchor='I-D.birkholz-rats-corim' target='https://datatracker.ietf.org/doc/html/draft-birkholz-rats-corim-03'>
   <front>
      <title>Concise Reference Integrity Manifest</title>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Thomas Fossati' initials='T.' surname='Fossati'>
         <organization>arm</organization>
      </author>
      <author fullname='Yogesh Deshpande' initials='Y.' surname='Deshpande'>
         <organization>arm</organization>
      </author>
      <author fullname='Ned Smith' initials='N.' surname='Smith'>
         <organization>Intel</organization>
      </author>
      <author fullname='Wei Pan' initials='W.' surname='Pan'>
         <organization>Huawei Technologies</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   Remote Attestation Procedures (RATS) enable Relying Parties to assess
   the trustworthiness of a remote Attester and therefore to decide
   whether to engage in secure interactions with it.  Evidence about
   trustworthiness can be rather complex and it is deemed unrealistic
   that every Relying Party is capable of the appraisal of Evidence.
   Therefore that burden is typically offloaded to a Verifier.  In order
   to conduct Evidence appraisal, a Verifier requires not only fresh
   Evidence from an Attester, but also trusted Endorsements and
   Reference Values from Endorsers and Reference Value Providers, such
   as manufacturers, distributors, or device owners.  This document
   specifies Concise Reference Integrity Manifests (CoRIM) that
   represent Endorsements and Reference Values in CBOR format.
   Composite devices or systems are represented by a collection of
   Concise Module Identifiers (CoMID) and Concise Software Identifiers
   (CoSWID) bundled in a CoRIM document.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-birkholz-rats-corim-03'/>
   
</reference>


<reference anchor='I-D.ietf-suit-trust-domains' target='https://datatracker.ietf.org/doc/html/draft-ietf-suit-trust-domains-02'>
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='13' month='March' year='2023'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it enables delegation of different rights to mutually distrusting
   entities for use for different purposes or components in the context
   of firmware or software update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-trust-domains-02'/>
   
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIAGSaD2QAA71c65LbRnb+j6foyFuxpCVpyfZWspN4d0cz43iqJMsZjXdr
S1apmmCTRAQCNBqYEVclP0ueJU+W71y60c2L4k2l4trLEOjL6XP9zukDT6fT
oq/62p2ZV64cOmdu3Lbt+qpZmXZpftwubO/Mq972gy/sfN65u18zctGWjd1g
0UVnl/20cv1y6oeqn3Y8Z/rkd0WJ4au2252Zqlm2RVFtuzPTd4Pvv3zy5PdP
vixs56zuVfW74r7t3q26dtji2Y/Xt8U7t8OjxZm5bnrXNa6fXtJeReF72yze
2rptsP/O+WJbnRXGdMvSLXy/q/WpMX1bJn9WzcI1fXjgQWXnlj7+3m2yn31X
lXFw2W42mBvfVk1dNeM27n0/rSvfT7HIvK0xbNo+/i3egEsbu92CgzLWDv26
7UDsFC/5n6rB6Gcz86LtbBMeCmefda5Z2CZ/1XYr21R/s33VNmfmvNuY59Wm
6t0iDHAbW9VnZi6TZxuaPCPx/GlFb2Y4CrY32f7fzcyzqnu3buu/5SR855p3
B69yEr7t7NCs26XrzCsILadijfmzuc7/k6/62TIOny0cdAKa0W2w1J0jEV5P
L5nWaWd7P3UWArg6v9UXYR15WbZdtTkzF+3N9Yt0Jisha9l00YIKnK8omqOb
8NANzrJ0vseo6XRq7ByStyW07HYNZW+X/T3UNCg/iDU9ngeNJLu4XUO83jwk
nX1kwnJm27V31YJkbu7tjmfi3c4sqiUOD2Uyg6wJXTbztu1Z/5d1e++hrGbu
DCaXXTV3eL0zlnWwbYzwa2a+a+/dnesmoKfyUDTnTYNFdFuMXzq3mNvyndm4
cg2q/IaJWGBW3W5d5yF7PgwegJp+bXvQolQVGElEmSXk6GfEDezit66sllXJ
oo/0eWxWV6t1f+/of49tTIsXtubD2ZEEomDbeu+8pwXBTDsyEEzoXNk2kMdQ
En2uWGB7GukxaiGcg6j4AVYjzgRmpWIosXzbzUS+m2qxqKF4n5EMu3Yx8Pyi
OGefc2SeKcEU4gIRBG3qcQwTuBP5FeVbwKd5EDSDYbifB3C23k2EzV1Hq7Vg
m1m5xkGLhVo/lGu4H9+7jQ87RTkm4rqv+rVxTTus1ibaDdgGupbwbaYjiko7
eJJIs6AlcDyHLTswkrQ/cGsCzvqhZs8OEcB9dda4JZZUtuvUgqhBIMBpnrer
FQ2nk8hkT/JyFrQz50g9SSDELl9ttnW13LFuFspKCOAv66p2puoNdInkXs3x
UzbkrfO102VhE+uOTl6493C0REmtFIGptu8hM+FGVDqvpoEVnDLPk8XYukDM
uicNJdfw2EB+lhha8wITs7WIeeVQ267emXu4MNL0atVAWmz/5O3n1uOnkoA1
NhVOw9wc5eJqx0Ejee2HLZ+UtYUEsK1JPpstQhmNZKdz8ezljWnn/wGZwbAd
ZIut2FbZ0MuBVjVsTaQeFZgLJvJRlJHWkA9zxMQ1Bo1aem8TSxnHu/cwbNLG
O0gaOjLY2tzZesDCRCmsHAzBs3LtwDRimZo+i0yNQg6NLek8tXsvB5zG0xnb
lWtEKiwPIe8vsoHZ4PmCDA8U9pXz4g/EMEZa2ZTeg0gjlsYUWhIac1g1Vh1W
5Fbwxux9wNGqjw6H1GwaPFvUKjieHsHDdQU7xg1cOCgdvIjCgj0dYsiOlvCl
a/CrJQ3/zCAiNeRQ2SuRQdy6blM1LRbemQ+f9eOvjyJuwBxDOMebBy9+fHX7
YCL/b75/yX/fXP37j9c3V5f096vvzp8/j38UOuLVdy9/fH45/jXOvHj54sXV
95cyGU9N9qh48OL8r3hDRD54+cPt9cvvz58/OKJpndOIVFHY23aOVMUCA8YA
hTnPLn74r/98+rX58OEfbr69+PLp099//Kg//vnpP32NH2RKslvbqGWxZ9wV
gEjOcjQg51rabQWFgv1CWz0UuAGO6By4+/g1cebNmfnXebl9+vUf9AEdOHsY
eJY9ZJ4dPjmYLEw88ujINpGb2fM9Tuf0nv81+x34njyEWkBJfFS2/jD0Vk1Z
DwvHNv8Mbp8gNlTa1grLWLPJsQNb95a8bLWxKzcz5zUAKAUQ9sxmb1kAYAo0
JGwsSrLa8V+jeZBtWtHtKH0sQyqCaAfpIfhu4ftLq64drkEyiD1yGnrw8hXb
GRwqmw4jLnL6N4j73aIorpds7iNeoOACPbTeDxTqsf7aUljDMlu2RUIJIYaz
cjHE2ZnGkbuu+p73zmJnCjLuydbTNRIcsLZkEw2YeEsrcozThRnXURRhX0Gh
BIEf0wqink7YtbUhaKckRpjBa42gg+1CY4RnOpYtufngkOIy245APyI6RbAp
Uqgebkf9rPz+4iVCXUcI4gfbAcvDcD3e3Ha76RViNv68GRoM/JkpxU+4rQV7
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
AA==

-->

</rfc>

